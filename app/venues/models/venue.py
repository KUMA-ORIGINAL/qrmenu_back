from django.contrib.auth import get_user_model
from django.db import models
from django.utils.text import slugify
from imagekit.models import ProcessedImageField
from pilkit.processors import ResizeToFill
from unidecode import unidecode

from services.model import BaseModel
from .work_schedule import WorkSchedule

User = get_user_model()


class Venue(BaseModel):
    COLOR_CHOICES = [
        ('#008B68', '–¢–µ–º–Ω–æ-–∑–µ–ª–µ–Ω—ã–π'),
        ('#FFB200', '–Ø–Ω—Ç–∞—Ä–Ω—ã–π'),
        ('#F80101', '–ê–ª—ã–π'),
        ('#FF4800', '–û—Ä–∞–Ω–∂–µ–≤—ã–π'),
        ('#00BBFF', '–ì–æ–ª—É–±–æ–π'),
        ('#0717FF', '–°–∏–Ω–∏–π'),
        ('#AF00A3', '–†–æ–∑–æ–≤—ã–π'),
        ('#000000', '–ß–µ—Ä–Ω—ã–π'),
        ('#00BFB2', '–ë–∏—Ä—é–∑–æ–≤—ã–π')
    ]

    company_name = models.CharField(max_length=100, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏")
    slug = models.SlugField(unique=True, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏', blank=True)
    color_theme = models.CharField(
        '–¢–µ–º–∞',
        max_length=7,
        choices=COLOR_CHOICES,
        default='#008B68',
        blank=True,
    )
    logo = ProcessedImageField(
        upload_to='venue_logo',
        processors=[ResizeToFill(44, 44)],
        format='PNG',
        options={'quality': 80},
        null=True,
        blank=True,
        verbose_name='–õ–æ–≥–æ—Ç–∏–ø',
    )
    account_number = models.CharField(max_length=100, verbose_name="–ù–æ–º–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞", blank=True)
    access_token = models.CharField(max_length=255, verbose_name="–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è POS-—Å–∏—Å—Ç–µ–º—ã", blank=True, null=True)

    # –í–ª–∞–¥–µ–ª—å—Ü—ã
    owner_id = models.PositiveIntegerField(verbose_name="ID –≤–ª–∞–¥–µ–ª—å—Ü–∞", blank=True, null=True)
    owner_name = models.CharField(max_length=100, verbose_name="–ò–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞", blank=True)
    owner_email = models.EmailField(verbose_name="–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞")
    owner_phone = models.CharField(max_length=20, blank=True, null=True, verbose_name="–¢–µ–ª–µ—Ñ–æ–Ω –≤–ª–∞–¥–µ–ª—å—Ü–∞")

    # –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
    city = models.CharField(max_length=100, blank=True, verbose_name="–ì–æ—Ä–æ–¥")
    country = models.CharField(max_length=100, verbose_name="–°—Ç—Ä–∞–Ω–∞")

    # üîπ –†–∞–∑–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –ø–æ —Ä–µ–∂–∏–º–∞–º
    delivery_service_fee_percent = models.PositiveIntegerField(
        default=0, verbose_name="–ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ (–¥–æ—Å—Ç–∞–≤–∫–∞)"
    )
    takeout_service_fee_percent = models.PositiveIntegerField(
        default=0, verbose_name="–ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ (—Å–∞–º–æ–≤—ã–≤–æ–∑)"
    )
    dinein_service_fee_percent = models.PositiveIntegerField(
        default=0, verbose_name="–ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ (–Ω–∞ –º–µ—Å—Ç–µ)"
    )

    # –¢–∞—Ä–∏—Ñ—ã
    tariff_key = models.CharField(max_length=100, blank=True, null=True, verbose_name="–ö–ª—é—á —Ç–∞—Ä–∏—Ñ–∞")
    tariff_price = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True, verbose_name="–¶–µ–Ω–∞ —Ç–∞—Ä–∏—Ñ–∞")
    next_pay_date = models.DateTimeField(blank=True, null=True, verbose_name="–î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–π –æ–ø–ª–∞—Ç—ã")
    pos_system = models.ForeignKey('POSSystem', on_delete=models.CASCADE, blank=True, null=True, verbose_name="POS —Å–∏—Å—Ç–µ–º–∞")

    # –†–µ–∂–∏–º—ã –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    is_delivery_available = models.BooleanField(default=True, verbose_name="–î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞")
    is_takeout_available = models.BooleanField(default=True, verbose_name="–°–∞–º–æ–≤—ã–≤–æ–∑ –¥–æ—Å—Ç—É–ø–µ–Ω")
    is_dinein_available = models.BooleanField(default=True, verbose_name="–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –Ω–∞ –º–µ—Å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ")

    # –î–æ—Å—Ç–∞–≤–∫–∞
    default_delivery_spot = models.ForeignKey(
        'Spot',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name='default_for_venue',
        verbose_name="–¢–æ—á–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
    )
    delivery_fixed_fee = models.DecimalField(max_digits=10, decimal_places=2, default=0,
                                             verbose_name="–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)")
    delivery_free_from = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True,
                                             verbose_name="–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –æ—Ç —Å—É–º–º—ã")

    # –ë–æ–Ω—É—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
    is_bonus_system_enabled = models.BooleanField(default=False, verbose_name="–ë–æ–Ω—É—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤–∫–ª—é—á–µ–Ω–∞")
    bonus_accrual_percent = models.PositiveIntegerField(default=0, verbose_name="–ü—Ä–æ—Ü–µ–Ω—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤")

    # –û–ø–∏—Å–∞–Ω–∏–µ
    terms = models.TextField(blank=True, null=True, verbose_name="–£—Å–ª–æ–≤–∏—è –∑–∞–≤–µ–¥–µ–Ω–∏—è")
    description = models.TextField(blank=True, null=True, verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è")

    def __str__(self):
        return f'{self.company_name}'

    class Meta:
        verbose_name = "–ó–∞–≤–µ–¥–µ–Ω–∏–µ"
        verbose_name_plural = "–ó–∞–≤–µ–¥–µ–Ω–∏—è"

    def save(self, *args, **kwargs):
        self.slug = slugify(unidecode(self.company_name)).lower()
        super().save(*args, **kwargs)

        # –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        existing_days = set(self.schedules.values_list("day_of_week", flat=True))
        all_days = set(val for val, _ in WorkSchedule.WeekDay.choices)

        missing_days = all_days - existing_days
        for day_val in missing_days:
            WorkSchedule.objects.create(
                venue=self,
                day_of_week=day_val,
                is_day_off=True,
            )
